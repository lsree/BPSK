options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: usrp_rx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: USRP RX
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: carrier_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 905e6
    step: 1e5
    stop: 930e6
    value: 915e6
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: coarse_freq_fft_size
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 76.0]
    rotation: 0
    state: enabled
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RX Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '89.6'
    value: '35'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 500e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 92.0]
    rotation: 0
    state: true
- name: squelch_power
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Squelch Power
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: '-100'
    step: '1'
    stop: '100'
    value: '-60'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 12.0]
    rotation: 0
    state: true
- name: sym_rate
  id: variable
  parameters:
    comment: ''
    value: samp_rate/sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 92.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/rf/Documents/BPSK/usrp_rx_shift_LPF_custom_squelch.iq
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 596.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: coarse_freq_fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 320.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_align_0
  id: blocks_tagged_stream_align
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 316.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: coarse_freq_fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 320.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nThis block tags bursts greater than the threshold and squelches\
      \ samples outside of that burst to zero. It does this by using an Exponentially\
      \ Weighted Moving Average Filter (EWMA). This is a type of single pole IIR filter.\
      \ Samples are tagged True if the block believes a burst is occurring. \n\nThreshold_db\
      \    Cutoff Threshold in dB\nCutoff_Freq     Cutoff frequency normalized to\
      \ sample rate\nBurst_Tag_Name  Name of tag that gets marked true if burst is\
      \ occurring\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\nfrom gnuradio\
      \ import filter\nimport pmt\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, threshold_db=-65,\
      \ cutoff_freq=.01, burst_tag_name = \"rx_burst\"):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Burst\
      \ Detect & Squelch',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.threshold = 10**(threshold_db/10)\n\
      \        self.alpha = cutoff_freq/(1+cutoff_freq)\n        self.prev_filt =\
      \ 0  #Save previous value of the filter\n        self.tag_key = pmt.intern(burst_tag_name)\n\
      \n\n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        input_samp = input_items[0]\n        mag2 = input_samp\
      \ * np.conj(input_samp)\n        \n        output = np.zeros(len(input_samp),\
      \ dtype=complex) #Squelched by default\n        # Apply Filter\n        for\
      \ i in range(0, len(mag2)):\n            self.prev_filt = self.alpha*mag2[i]\
      \ + (1-self.alpha)*self.prev_filt \n            \n            if (self.prev_filt\
      \ >= self.threshold):\n                self.add_item_tag(0, self.nitems_written(0)\
      \ + i, self.tag_key, \n                    pmt.PMT_T)\n                output[i]\
      \ = input_samp[i]\n\n                \n        output_items[0][:] = output\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    burst_tag_name: '"packet_len"'
    comment: ''
    cutoff_freq: 1/(sps*4)
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_db: squelch_power
  states:
    _io_cache: ('Burst Detect & Squelch', 'blk', [('threshold_db', '-65'), ('cutoff_freq',
      '0.01'), ('burst_tag_name', "'rx_burst'")], [('0', 'complex', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 300.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nThis block assumes that the\
      \ bursty data is aligned (Tagged stream aligned using \n\n        #TODO Need\
      \ to handle transition between fft chunks either\n        # 1. Id burst and\
      \ fft the whole burst. Need to reset between bursts\n        # 2. Id burst and\
      \ fft first part of burst and then maintain that correction for the whole burst\n\
      \        # 3. Implement a smoothing function\n\n\n            #for tag in tagTuple:\n\
      \            #print(f\"tagTuple Offset {tag.offset} Key {pmt.to_python(tagTuple[0].key)}\"\
      )\n            #print(f\"Len input: {input_items[0].shape}\")\n            #print(f\"\
      ninput items: {self.nitems_read(0)} Relative Offset: {tag.offset - self.nitems_read(0)}\"\
      )\n\"\"\"\n\nimport numpy as np\nfrom scipy import signal, fft\nfrom gnuradio\
      \ import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base classes are\
      \ basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block example\
      \ - a simple multiply const\"\"\"\n\n    def __init__(self, nfft=2048, order=2,\
      \ burst_tag_name = \"rx_burst\"):  # only default arguments here\n        \"\
      \"\"arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Coarse Frequency Correction',   # will\
      \ show up in GRC\n            in_sig=[(np.complex64, nfft)],\n            out_sig=[(np.complex64,\
      \ nfft)]\n        )\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n  \
      \      self.nfft = nfft\n        #self.set_output_multiple(nfft)\n        self.order\
      \ = order\n        self.fft_freqs = fft.fftfreq(nfft)\n        self.time_vector\
      \ = np.arange(0, nfft)/nfft\n        self.tag_key = pmt.intern(burst_tag_name)\n\
      \n        \n    #def general_work(self, input_items, output_items):\n    def\
      \ work(self, input_items, output_items):\n        input_vectors = input_items[0]\n\
      \        \n        #Check if correct tag is present\n        tagTuple = self.get_tags_in_window(0,\
      \ 0, len(input_vectors), self.tag_key)\n        if(tagTuple):   #I'm not going\
      \ to check each tag for it's location because that would be computationally\
      \ intensive     \n            #Intead we'll just FFT each group of inputs vectors\
      \ that have a burst tag present somewhere in them. \n            for i in range(0,\
      \ len(input_vectors)):\n                samples = input_vectors[i]\n\n     \
      \           freq_magnitudes = np.abs(fft.fft(samples**self.order, self.nfft))\n\
      \                freq_offset = self.fft_freqs[np.argmax(freq_magnitudes)]/self.order\n\
      \                output_items[0][i] = samples*np.exp(2j*np.pi*freq_offset*self.time_vector)\n\
      \        else:\n            output_items[0][:] = 0\n        \n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    burst_tag_name: '''packet_len'''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nfft: coarse_freq_fft_size
    order: '2'
  states:
    _io_cache: ('Coarse Frequency Correction', 'blk', [('nfft', '2048'), ('order',
      '2'), ('burst_tag_name', "'rx_burst'")], [('0', 'complex', 2048)], [('0', 'complex',
      2048)], 'Embedded Python Block example - a simple multiply const', ['nfft',
      'order'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 300.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom scipy import signal, fft\nimport pmt\n\n\nclass\
      \ blk(gr.decim_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \    \"\"\"Embedded Python Block example - a simple multiply const\"\"\"\n\n\
      \    def gardner_TED(self, signal, sample_pos, sps):\n        error = signal[sample_pos-int(sps/2)]\
      \ * (signal[sample_pos] - signal[sample_pos-sps])\n        return error.real\
      \ + error.imag\n    \n    def early_late_TED(self,signal, sample_pos, sps):\
      \ \n        error = signal[sample_pos] * (signal[sample_pos+int(sps/2)] - signal[sample_pos-int(sps/2)])\n\
      \        return error.real + error.imag\n        \n    def __init__(self, interpolation_factor=1,\
      \ sps=2, timing_error_detector=\"gardner\", damping_factor=1, bandwidth=.2):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.decim_block.__init__(\n        \
      \    self,\n            name='Timing Error Detector',   \n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64], \n            decim = sps\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.set_relative_rate(1.0/sps)\n\
      \        self.interpolation_factor = interpolation_factor\n        self.sps\
      \ = sps\n        self.interp_sps = sps*interpolation_factor\n        self.pll_i\
      \ = self.interp_sps\n        \n        #Calculate Ki & Kp\n        theta = bandwidth/\
      \ (2 * (damping_factor + 1/(4*damping_factor)))\n        delta = 1+2*damping_factor*theta\
      \ + theta**2\n        self.kp = 4*damping_factor*theta/(delta*2)\n        self.ki\
      \ = 4*theta**2/(delta*2)\n        \n        self.error_integral = 0\n      \
      \  TED = {'gardner':self.gardner_TED, 'early_late':self.early_late_TED}\n  \
      \      self.timing_error_detector = TED[timing_error_detector]\n        \n \
      \       \n        #if timing_error_detector == \"gardner\":\n        #    self.timing_error_detector\
      \ = self.gardner_TED\n        #elif timing_error_detector == \"early_late\"\
      :\n        #    self.timing_error_detector = self.early_late_TED\n        #else:\n\
      \        #    raise ValueError(\"Invalid Timing Error Detector\")\n        \
      \    \n\n    def work(self, input_items, output_items):\n        #Check if in\
      \ Burst\n        \n        #Interpolate\n        print(\"Start\")\n        interp_signal\
      \ = signal.resample_poly(input_items[0], self.interpolation_factor, 1)\n   \
      \     #Implement PLL\n        out_samples = np.full(int(len(input_items[0])/self.sps),\
      \ -1, dtype=np.complex64)  #Make -1 to detect errors\n        print(f\"Begin\
      \ PLL: {self.pll_i}\")\n        while self.pll_i < len(interp_signal) - self.interp_sps:\n\
      \            error = self.timing_error_detector(interp_signal, self.pll_i, self.interp_sps)\n\
      \            self.error_integral += self.ki*error\n            pll_output =\
      \ self.kp*error + self.error_integral\n            self.pll_i += int(self.interp_sps\
      \ + np.rint(pll_output*self.interp_sps))\n            \n            #print(f\"\
      self.pll_i/self.interp_sps {self.pll_i/self.interp_sps}\")\n        #    out_samples\
      \ = interp_signal[self.pll_i]\n            output_items[0][int(self.pll_i/self.interp_sps)]\
      \ = interp_signal[self.pll_i]\n        #output_items[0][:] = out_samples\n \
      \       #Wrap self.pll_i for the next chunk of data\n        print(f\"Last PLL:\
      \ {self.pll_i} div interp_sps {self.pll_i/self.interp_sps}\")\n        print(f\"\
      Len Input: {len(input_items[0])} Len Output {len(output_items[0])} div {len(input_items[0])/len(output_items[0])}\"\
      )\n        self.pll_i = self.pll_i % self.interp_sps + self.interp_sps\n   \
      \     print(f\"Last PLL2: {self.pll_i}\")\n        return len(output_items[0])\n\
      \        \n\n"
    affinity: ''
    alias: ''
    bandwidth: '0.001688'
    comment: ''
    damping_factor: '1'
    interpolation_factor: 2**4
    maxoutbuf: '0'
    minoutbuf: '0'
    sps: sps
    timing_error_detector: '''early_late'''
  states:
    _io_cache: ('Timing Error Detector', 'blk', [('interpolation_factor', '1'), ('sps',
      '2'), ('timing_error_detector', "'gardner'"), ('damping_factor', '1'), ('bandwidth',
      '0.2')], [('0', 'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block
      example - a simple multiply const', ['interpolation_factor', 'sps', 'timing_error_detector'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 604.0]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '.05'
    xmin: -.05
    ymax: '.05'
    ymin: -.05
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 676.0]
    rotation: 0
    state: true
- name: qtgui_eye_sink_x_0
  id: qtgui_eye_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: blue
    color2: blue
    color3: blue
    color4: blue
    color5: blue
    color6: blue
    color7: blue
    color8: blue
    color9: blue
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Before TED Real
    label10: Signal 10
    label2: Before TED Imag
    label3: After TED Real
    label4: After TED Imag
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    nconnections: '1'
    samp_per_symbol: sps
    size: '1024'
    srate: samp_rate
    style1: '4'
    style10: '1'
    style2: '4'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '.002'
    ymin: -.002
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 468.0]
    rotation: 0
    state: enabled
- name: qtgui_eye_sink_x_0_0
  id: qtgui_eye_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: cyan
    color10: blue
    color2: blue
    color3: blue
    color4: blue
    color5: blue
    color6: blue
    color7: blue
    color8: blue
    color9: blue
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: After TED Real
    label10: Signal 10
    label2: After TED Imag
    label3: After TED Real
    label4: After TED Imag
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    nconnections: '1'
    samp_per_symbol: '1'
    size: '1024'
    srate: samp_rate
    style1: '4'
    style10: '1'
    style2: '4'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '.002'
    ymin: -.002
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 476.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '2048'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: RC
    label10: ''''''
    label2: Trigger LPF
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Freq RC"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.1'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 156.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: 1024*5
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '1'
    tr_delay: '0'
    tr_level: '1'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 124.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '4096'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: RRC
    label10: ''
    label2: Raw
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Waterfall RC"'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.1'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 156.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '4096'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Squelched"'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.1'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 372.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: carrier_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '"serial=30BC4A2"'
    dev_args: ''
    gain0: gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 284.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: cfo_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 316.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: cfo_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 612.0]
    rotation: 0
    state: true

connections:
- [blocks_stream_to_vector_0, '0', epy_block_1, '0']
- [blocks_tagged_stream_align_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_vector_to_stream_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_vector_to_stream_0, '0', virtual_sink_0, '0']
- [epy_block_0, '0', blocks_tagged_stream_align_0, '0']
- [epy_block_0, '0', qtgui_waterfall_sink_x_0_0, '0']
- [epy_block_1, '0', blocks_vector_to_stream_0, '0']
- [epy_block_2, '0', blocks_file_sink_0, '0']
- [epy_block_2, '0', qtgui_const_sink_x_0, '0']
- [epy_block_2, '0', qtgui_eye_sink_x_0_0, '0']
- [uhd_usrp_source_0, '0', epy_block_0, '0']
- [uhd_usrp_source_0, '0', qtgui_freq_sink_x_0, '0']
- [uhd_usrp_source_0, '0', qtgui_waterfall_sink_x_0, '0']
- [virtual_source_0, '0', epy_block_2, '0']
- [virtual_source_0, '0', qtgui_eye_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
