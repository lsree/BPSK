options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb_qt_gui
    hier_block_src_path: '.:'
    id: bpsk_demod
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: BPSK Demod
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: rx_sym_rate
  id: variable
  parameters:
    comment: ''
    value: rx_samp_rate/rx_sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 12.0]
    rotation: 0
    state: true
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 1060.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: rx_raw_pll
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 500.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: rx_raw_TED
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 692.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_0_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: rx_raw_rrc
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 756.0]
    rotation: 0
    state: disabled
- name: blocks_tagged_stream_align_0
  id: blocks_tagged_stream_align
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 292.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nThis block tags bursts greater than the threshold and squelches\
      \ samples outside of that burst to zero. It does this by using an Exponentially\
      \ Weighted Moving Average Filter (EWMA). This is a type of single pole IIR filter.\
      \ Samples are tagged True if the block believes a burst is occurring. \n\nThreshold_db\
      \    Cutoff Threshold in dB\nCutoff_Freq     Cutoff frequency normalized to\
      \ sample rate\nBurst_Tag_Name  Name of tag that gets marked true if burst is\
      \ occurring\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\nfrom gnuradio\
      \ import filter\nimport pmt\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, threshold_db=-65,\
      \ cutoff_freq=.01, burst_tag_name = \"rx_burst\"):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Burst\
      \ Detect & Squelch',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.threshold = 10**(threshold_db/10)\n\
      \        self.alpha = cutoff_freq/(1+cutoff_freq)\n        self.prev_filt =\
      \ 0  #Save previous value of the filter\n        self.tag_key = pmt.intern(burst_tag_name)\n\
      \        self.message_port_register_out(pmt.intern('Packet'))\n\n\n    def work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        input_samp = input_items[0]\n        mag2 = input_samp * np.conj(input_samp)\n\
      \        \n        output = np.zeros(len(input_samp), dtype=complex) #Squelched\
      \ by default\n        # Apply Filter\n        for i in range(0, len(mag2)):\n\
      \            self.prev_filt = self.alpha*mag2[i] + (1-self.alpha)*self.prev_filt\
      \ \n            \n            if (self.prev_filt >= self.threshold):\n     \
      \           self.add_item_tag(0, self.nitems_written(0) + i, self.tag_key, \n\
      \                    pmt.PMT_T)\n                output[i] = input_samp[i]\n\
      \n                \n        output_items[0][:] = output\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    burst_tag_name: '"packet_len"'
    comment: ''
    cutoff_freq: 1/(4*rx_sps)
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_db: squelch_power
  states:
    _io_cache: ('Burst Detect & Squelch', 'blk', [('threshold_db', '-65'), ('cutoff_freq',
      '0.01'), ('burst_tag_name', "'rx_burst'")], [('0', 'complex', 1)], [('0', 'complex',
      1), ('Packet', 'message', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 292.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom scipy import signal, fft\nimport pmt\n\n\nclass\
      \ blk(gr.decim_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \    \"\"\"Embedded Python Block example - a simple multiply const\"\"\"\n\n\
      \    def gardner_TED(self, signal, sample_pos, sps):\n        error = signal[sample_pos-int(sps/2)]\
      \ * (signal[sample_pos] - signal[sample_pos-sps])\n        return error.real\
      \ + error.imag\n    \n    def early_late_TED(self,signal, sample_pos, sps):\
      \ \n        error = signal[sample_pos] * (signal[sample_pos+int(sps/2)] - signal[sample_pos-int(sps/2)])\n\
      \        return error.real + error.imag\n        \n    def __init__(self, interpolation_factor=1,\
      \ sps=2, timing_error_detector=\"gardner\", damping_factor=1, bandwidth=.2,\
      \ burst_tag_name='rx_burst'):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n        gr.decim_block.__init__(\n\
      \            self,\n            name='Timing Error Detector',   \n         \
      \   in_sig=[np.complex64],\n            out_sig=[np.complex64], \n         \
      \   decim = sps\n        )\n        # if an attribute with the same name as\
      \ a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.tag_key = pmt.intern(burst_tag_name)\n        self.set_relative_rate(1.0/sps)\n\
      \        self.interpolation_factor = interpolation_factor\n        self.sps\
      \ = sps\n        self.interp_sps = sps*interpolation_factor\n        self.pll_i\
      \ = self.interp_sps\n        \n        #Calculate Ki & Kp\n        theta = bandwidth/\
      \ (2 * (damping_factor + 1/(4*damping_factor)))\n        delta = 1+2*damping_factor*theta\
      \ + theta**2\n        self.kp = 4*damping_factor*theta/(delta*2)\n        self.ki\
      \ = 4*theta**2/(delta*2)\n        \n        self.error_integral = 0\n      \
      \  TED = {'gardner':self.gardner_TED, 'early_late':self.early_late_TED}\n  \
      \      self.timing_error_detector = TED[timing_error_detector]\n        \n \
      \       \n        #if timing_error_detector == \"gardner\":\n        #    self.timing_error_detector\
      \ = self.gardner_TED\n        #elif timing_error_detector == \"early_late\"\
      :\n        #    self.timing_error_detector = self.early_late_TED\n        #else:\n\
      \        #    raise ValueError(\"Invalid Timing Error Detector\")\n        \
      \    \n\n    def work(self, input_items, output_items):\n        #TODO Check\
      \ if in Burst to reduce compute. I just check if chunk has bust tagged data,\
      \ but I should get the first one and then start there\n        tagTuple = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]), self.tag_key)\n        if(tagTuple):\n           \
      \ #print(f\"Tag Tuple Len: {len(tagTuple)}\")\n            #Interpolate\n  \
      \          interp_signal = signal.resample_poly(input_items[0], self.interpolation_factor,\
      \ 1)\n            #Implement PLL\n            pll_start = self.pll_i\n     \
      \       while self.pll_i < len(interp_signal) - self.interp_sps:\n         \
      \       error = self.timing_error_detector(interp_signal, self.pll_i, self.interp_sps)\n\
      \                self.error_integral += self.ki*error\n                pll_output\
      \ = self.kp*error + self.error_integral\n                self.pll_i += int(self.interp_sps\
      \ + np.rint(pll_output*self.interp_sps))\n\n                output_items[0][int(self.pll_i/self.interp_sps)]\
      \ = interp_signal[self.pll_i]\n            #print(f\"Samples Iterated Thru:\
      \ {self.pll_i - pll_start}\")\n            #Wrap self.pll_i for the next chunk\
      \ of data\n            self.pll_i = self.pll_i % self.interp_sps + self.interp_sps\n\
      \        else:\n            output_items[0][:] = 0\n\n        return len(output_items[0])\n\
      \        \n\n"
    affinity: ''
    alias: ''
    bandwidth: '0.001688'
    burst_tag_name: '''packet_len'''
    comment: ''
    damping_factor: '1'
    interpolation_factor: 2**5
    maxoutbuf: '0'
    minoutbuf: '0'
    sps: rx_sps
    timing_error_detector: '''early_late'''
  states:
    _io_cache: ('Timing Error Detector', 'blk', [('interpolation_factor', '1'), ('sps',
      '2'), ('timing_error_detector', "'gardner'"), ('damping_factor', '1'), ('bandwidth',
      '0.2'), ('burst_tag_name', "'rx_burst'")], [('0', 'complex', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', ['interpolation_factor',
      'sps', 'timing_error_detector'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 604.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ damping_factor=1.0, loop_bandwidth = .002, burst_tag_name='rx_burst'):  #\
      \ only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='BSPK PLL',   # will show up in GRC\n          \
      \  in_sig=[np.complex64],\n            out_sig=[np.complex64]\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        self.tag_key\
      \ = pmt.intern(burst_tag_name)\n        \n        #Calculate Ki & Kp\n     \
      \   theta = loop_bandwidth/ (2 * (damping_factor + 1/(4*damping_factor)))\n\
      \        delta = 1+2*damping_factor*theta + theta**2\n        self.kp = 4*damping_factor*theta/(delta*2)\n\
      \        self.ki = 4*theta**2/(delta*2)\n        self.error_integral = 0\n \
      \       self.phase_estimate = 0\n\n    def work(self, input_items, output_items):\n\
      \         #TODO Check if in Burst to reduce compute. I just check if chunk has\
      \ bust tagged data, but I should get the first one and then start there\n  \
      \      #tagTuple = self.get_tags_in_window(0, 0, len(input_items[0]), self.tag_key)\n\
      \        output_items[0][:] = 0\n        #if(tagTuple):\n            #first_valid_sample\
      \ = tagTuple[0].offset - self.nitems_read(0)#I am assuming that the first tag\
      \ is the first burst signal\n            #Do PLL through chunk\n           \
      \ #print(f\"1st Valid Sample {first_valid_sample} Value: {pmt.to_python(tagTuple[0].value)}\"\
      )\n            #for i, sample in enumerate(input_items[0][first_valid_sample:]):\n\
      \        for i, sample in enumerate(input_items[0]):\n            if sample.real\
      \ != 0:\n                output_items[0][i] = sample*np.exp(-1j*self.phase_estimate)\n\
      \                error = output_items[0][i].imag/output_items[0][i].real\n \
      \               self.error_integral += self.ki*error\n                self.phase_estimate\
      \ += self.kp*error + self.error_integral\n                self.phase_estimate\
      \ = np.fmod(self.phase_estimate, 2*np.pi)    #Prevent pll_phase from getting\
      \ too big\n        #print(output_items[0][first_valid_sample+1])\n        #print(f\"\
      Phase estimate: {self.phase_estimate}\")\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    burst_tag_name: '''packet_len'''
    comment: ''
    damping_factor: '1.2'
    loop_bandwidth: '.2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BSPK PLL', 'blk', [('damping_factor', '1.0'), ('loop_bandwidth',
      '0.002'), ('burst_tag_name', "'rx_burst'")], [('0', 'complex', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 620.0]
    rotation: 0
    state: enabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='BPSK Demod',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.uint8]\n        )\n        # if an attribute with the\
      \ same name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n\n    def work(self, input_items, output_items):\n        \"\"\
      \"example: multiply with constant\"\"\"\n        #print((input_items[0]>1)*1)\n\
      \        output_items[0][:] = (input_items[0].real>0)*1\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BPSK Demod', 'blk', [], [('0', 'complex', 1)], [('0', 'byte', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 640.0]
    rotation: 0
    state: enabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\ntag_name Locates where the packet\
      \ starts and it's value stores if it needs to be inverted\n    False: Does not\
      \ need to be inverted\n    True: Needs to be inverted\n\"\"\"\n\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  #\
      \ other base classes are basic_block, decim_block, interp_block\n    \"\"\"\
      Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ syncword=\"10101110010\", tag_name=\"pkt_start_invert\"):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Correlate Syncword',   # will show up in GRC\n            in_sig=[np.uint8],\n\
      \            out_sig=[np.uint8]\n        )\n        # if an attribute with the\
      \ same name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.len_mask = 2**len(syncword)-1  #This is to prevent\
      \ the correlator from comparing numbers greater than the syncword\n        self.syncword\
      \ = int(syncword,2)\n        self.syncword_inv = self.syncword ^ self.len_mask\n\
      \     \n        self.packed_bits = 0\n        self.tag_name = pmt.intern(tag_name)\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        for i, bit in enumerate(input_items[0]):\n  \
      \          #print(f\"In loop {i}\")\n            #Shift new bit in\n       \
      \     self.packed_bits = (self.packed_bits << 1) | (bit & 1)\n            self.packed_bits\
      \ &= self.len_mask\n\n            #Check correlation\n            #Normal/Non-inverted\n\
      \            correlated = self.packed_bits ^ self.syncword\n            if correlated.bit_count()\
      \ == 0:\n                #Add Tag\n                self.add_item_tag(0, self.nitems_written(0)\
      \ + i + 1, self.tag_name, pmt.PMT_F)\n                \n            #Check Inverted\n\
      \            correlated_inv = self.packed_bits ^ self.syncword_inv\n       \
      \     if correlated_inv.bit_count() == 0:\n                #Add Tag\n      \
      \          self.add_item_tag(0, self.nitems_written(0) + i + 1, self.tag_name,\
      \ pmt.PMT_T)\n        output_items[0][:] = input_items[0]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    syncword: '"10101110010"'
    tag_name: '"pkt_start_invert"'
  states:
    _io_cache: ('Correlate Syncword', 'blk', [('syncword', "'10101110010'"), ('tag_name',
      "'pkt_start_invert'")], [('0', 'byte', 1)], [('0', 'byte', 1)], 'Embedded Python
      Block example - a simple multiply const', ['syncword', 'tag_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 916.0]
    rotation: 0
    state: enabled
- name: epy_block_6
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, tag_name=\"\
      pkt_start\"):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Parse Header',   # will show up in GRC\n\
      \            in_sig=[np.uint8],\n            out_sig=None\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n        self.state = \"\
      Scanning\"\n        self.len_bit_stream = np.empty(0, dtype=np.uint8)\n    \
      \    self.tag_name = pmt.intern(tag_name)\n        self.invert = False\n   \
      \     \n        self.msg_len = 0\n        self.msg_len_bitstream = np.empty(0,\
      \ dtype=np.uint8)\n        \n        self.msg_bitstream = np.empty(0, dtype=np.uint8)\n\
      \        self.message_port_register_out(pmt.intern('Packet'))\n        \n\n\
      \    def work(self, input_items, output_items):\n       \n        i = 0\n  \
      \      while i < len(input_items[0]):\n            if self.state == \"Scanning\"\
      :\n                i = self.scanning(input_items[0], i)\n            elif self.state\
      \ == \"Get Len\":\n                i = self.get_len(input_items[0], i)\n   \
      \         elif self.state == \"Get MSG\":\n                i = self.get_msg(input_items[0],\
      \ i)\n            else:\n                print(f\"Unknown state: {self.state}\"\
      )\n                self.state = \"Scanning\"\n        return len(input_items[0])\n\
      \        \n    def scanning(self, input_items, index):\n        ''' This function\
      \ returns the relative position of the first available tag where the correlator\n\
      \        '''\n        #Get tags\n        tags = self.get_tags_in_window(0, index,\
      \ len(input_items), self.tag_name)\n        if tags:\n            self.state\
      \ = \"Get Len\"\n            self.invert = pmt.to_python(tags[0].value)\n  \
      \          return tags[0].offset - self.nitems_read(0) #Return relative offset\n\
      \        else: #No tag found advance loop to next chunk\n            return\
      \ len(input_items)\n            \n    def get_len(self, input_items, i):\n \
      \       #Get 8 bits for len\n        #Deal with edge case where there's not\
      \ enough samples to constitute the len field\n        if len(input_items[i:])\
      \ < 8 - len(self.msg_len_bitstream):\n            self.msg_len_bitstream = np.concatenate([self.msg_bitstream,\
      \ input_items[i:]])\n            return i + len(input_items)\n        \n   \
      \     #There are 8 bits\n        self.msg_len_bitstream = np.concatenate([self.msg_len_bitstream,\
      \ input_items[i:i+8-len(self.msg_len_bitstream)]])\n        self.msg_len = np.packbits(self.msg_len_bitstream)[0]\n\
      \        #Check for inversion\n        if self.invert:\n            self.msg_len\
      \ ^= 0xFF\n            \n        #Change state & Reset\n        self.msg_len_bitstream\
      \ = np.empty(0, dtype=np.uint8)\n        self.state = \"Get MSG\"\n        \n\
      \        return i+8\n        \n    def get_msg(self, input_items, i):\n    \
      \    #Deal w/ edge case where there not enough samples to constitute the entire\
      \ msg\n        if (len(input_items[i:]) < self.msg_len*8 - len(self.msg_bitstream)):\n\
      \            self.msg_bitstream = np.concatenate([self.msg_bitstream, input_items[i:]])\n\
      \            return i + len(input_items[i:])\n            \n        #There are\
      \ enough samples\n        num_bits_read = self.msg_len*8-len(self.msg_bitstream)\n\
      \        msg = np.concatenate([self.msg_bitstream, input_items[i:i+num_bits_read]])\n\
      \        msg = np.packbits(msg)\n        if self.invert:\n            msg =\
      \ ~msg\n        \n        pmt_out = pmt.cons(pmt.intern(\"MSG\"), pmt.to_pmt(msg))\n\
      \        self.message_port_pub(pmt.intern('Packet'), pmt_out)\n        \n  \
      \      #Change state and reset\n        self.state = \"Scanning\"\n        msg_len\
      \ = self.msg_len\n        self.msg_len = 0\n        self.msg_bitstream = np.empty(0,\
      \ dtype=np.uint8)\n        return i + num_bits_read\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_name: '"pkt_start_invert"'
  states:
    _io_cache: ('Parse Header', 'blk', [('tag_name', "'pkt_start'")], [('0', 'byte',
      1)], [('Packet', 'message', 1)], 'Embedded Python Block example - a simple multiply
      const', ['tag_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 940.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from PyQt5 import Qt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 20.0]
    rotation: 0
    state: true
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from gnuradio import qtgui
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 68.0]
    rotation: 0
    state: true
- name: pad_sink_1
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: message
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 932.0]
    rotation: 0
    state: true
- name: pad_source_1
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 316.0]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '.01'
    xmin: -.01
    ymax: '.01'
    ymin: -.01
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 780.0]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '"BPSK PLL"'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '.01'
    xmin: -.01
    ymax: '.01'
    ymin: -.01
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 492.0]
    rotation: 0
    state: enabled
- name: qtgui_eye_sink_x_0
  id: qtgui_eye_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: blue
    color2: blue
    color3: blue
    color4: blue
    color5: blue
    color6: blue
    color7: blue
    color8: blue
    color9: blue
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Before TED Real
    label10: Signal 10
    label2: Before TED Imag
    label3: After TED Real
    label4: After TED Imag
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    nconnections: '1'
    samp_per_symbol: rx_sps
    size: '1024'
    srate: rx_samp_rate
    style1: '4'
    style10: '1'
    style2: '4'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '.005'
    ymin: -.005
    yunit: '"RRC Eye"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 476.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: rx_samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '2048'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: RC
    label10: ''''''
    label2: Trigger LPF
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Freq RC"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.1'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 156.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"RRC Time"'
    nconnections: '1'
    size: rx_sps*300*2
    srate: rx_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '1'
    tr_delay: '0'
    tr_level: '1'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 380.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"PLL Time"'
    nconnections: '1'
    size: rx_sps*300
    srate: rx_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '1'
    tr_delay: '0'
    tr_level: '1'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 396.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"TED Time"'
    nconnections: '1'
    size: rx_sps*300
    srate: rx_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '1'
    tr_delay: '0'
    tr_level: '1'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 492.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Demoded"'
    nconnections: '1'
    size: '1024'
    srate: rx_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 1036.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: rx_samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '4096'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: RRC
    label10: ''
    label2: Raw
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Waterfall RC"'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.1'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 116.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: rx_samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '4096'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Squelched"'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.1'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 372.0]
    rotation: 0
    state: enabled
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.51'
    comment: ''
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: 2**7-1
    samp_rate: rx_samp_rate
    sym_rate: rx_sym_rate
    type: fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 572.0]
    rotation: 0
    state: enabled
- name: rx_samp_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RX Sample Rate
    short_id: ''
    type: intx
    value: int(500e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 12.0]
    rotation: 0
    state: true
- name: rx_sps
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Receive Samples per Symbol
    short_id: ''
    type: intx
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 12.0]
    rotation: 0
    state: true
- name: squelch_power
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RX Squelch Power
    short_id: ''
    type: intx
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 12.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: cfo_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 284.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: bits
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 636.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: cfo_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 612.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: bits
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 932.0]
    rotation: 0
    state: true

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_1, '0']
- [blocks_tagged_stream_align_0, '0', virtual_sink_0, '0']
- [epy_block_0, '0', blocks_tagged_stream_align_0, '0']
- [epy_block_0, '0', qtgui_waterfall_sink_x_0_0, '0']
- [epy_block_2, '0', blocks_file_sink_0_0, '0']
- [epy_block_2, '0', epy_block_3, '0']
- [epy_block_2, '0', qtgui_const_sink_x_0, '0']
- [epy_block_2, '0', qtgui_time_sink_x_0_0_0, '0']
- [epy_block_3, '0', blocks_file_sink_0, '0']
- [epy_block_3, '0', epy_block_4, '0']
- [epy_block_3, '0', qtgui_const_sink_x_0_0, '0']
- [epy_block_3, '0', qtgui_time_sink_x_0_0, '0']
- [epy_block_4, '0', virtual_sink_1, '0']
- [epy_block_5, '0', blocks_char_to_float_0, '0']
- [epy_block_5, '0', epy_block_6, '0']
- [epy_block_6, Packet, pad_sink_1, in]
- [pad_source_1, '0', epy_block_0, '0']
- [pad_source_1, '0', qtgui_freq_sink_x_0, '0']
- [pad_source_1, '0', qtgui_waterfall_sink_x_0, '0']
- [root_raised_cosine_filter_0, '0', blocks_file_sink_0_0_0, '0']
- [root_raised_cosine_filter_0, '0', epy_block_2, '0']
- [root_raised_cosine_filter_0, '0', qtgui_eye_sink_x_0, '0']
- [root_raised_cosine_filter_0, '0', qtgui_time_sink_x_0, '0']
- [virtual_source_0, '0', root_raised_cosine_filter_0, '0']
- [virtual_source_1, '0', epy_block_5, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
