options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: USRP_TX
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: USRP TX
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: carrier_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Carrier Frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 905e6
    step: 1e4
    stop: 930e6
    value: 915e6
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 8.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: TX Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: int
    start: '0'
    step: '1'
    stop: '76'
    value: '50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 8.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(250e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 88.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 88.0]
    rotation: 0
    state: true
- name: tx_device_addr
  id: variable
  parameters:
    comment: ''
    value: '"serial=31909E4"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 12.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/user/Documents/locchanan-senior/BPSK/tx_modulated.iq
    type: complex
    unbuffered: 'True'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1552, 568.0]
    rotation: 0
    state: disabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 32.0]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("TEST")
    period: '2000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 320.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 712.0]
    rotation: 0
    state: disabled
- name: blocks_tagged_stream_multiply_length_0
  id: blocks_tagged_stream_multiply_length
  parameters:
    affinity: ''
    alias: ''
    c: sps
    comment: ''
    lengthtagname: '"tx_pkt_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 608.0]
    rotation: 0
    state: true
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 592.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, symbol_map=[-1+0j,\
      \ 1+0j]):  # only default arguments here\n        \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n    \
      \        self,\n            name='PSK Mod',   # will show up in GRC\n      \
      \      in_sig=[np.uint8],\n            out_sig=[np.complex64]\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        self.symbol_map\
      \ = np.array(symbol_map)\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = self.symbol_map[input_items[0]]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    symbol_map: '[-1+0j, 1+0j]'
  states:
    _io_cache: ('PSK Mod', 'blk', [('symbol_map', '[(-1+0j), (1+0j)]')], [('0', 'byte',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', ['symbol_map'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 616.0]
    rotation: 0
    state: true
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport queue\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ preamble_len=12, syncword=\"1110010\"):  # only default arguments here\n \
      \       \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n\
      \        gr.sync_block.__init__(\n            self,\n            name='Packetize',\
      \   # will show up in GRC\n            in_sig= None,\n            out_sig= None\n\
      \        )\n        \n        #Store Variables\n        self.preamble = np.array(int((preamble_len+1)/2)*[1,0],\
      \ dtype=np.uint8)[:preamble_len]\n        self.syncword = np.array(list(syncword),\
      \ dtype=np.uint8)\n        \n        #Make values are binary\n        if np.any(self.syncword\
      \ > 1):\n        \tprint(np.any(self.syncword > 1))\n        \traise ValueError(\"\
      Inavlid Syncword\")\n        \n        # Register port and handler\n       \
      \ self.message_port_register_in(pmt.intern('MSG_In'))\n        self.message_port_register_out(pmt.intern('Unpacked\
      \ Packet'))\n        self.set_msg_handler(pmt.intern('MSG_In'), self.handle_msg)\n\
      \        \n        \n    def handle_msg(self, msg):\n        #Get msg\n    \
      \    payload = pmt.to_python(msg)\n        \n        payload = np.fromstring(payload[1],\
      \ dtype=np.uint8)\n        payload_len = np.array([len(payload)], dtype=np.uint8)\n\
      \        \n        \n        packet = np.concatenate((self.preamble, self.syncword,\
      \ np.unpackbits(np.concatenate((payload_len, payload)), bitorder='big')))\n\
      \        \n\n     \n        #Create PMT u8vector\n        pmt_out = pmt.cons(pmt.PMT_NIL,\
      \ pmt.init_u8vector(len(packet), packet))\n        self.message_port_pub(pmt.intern('Unpacked\
      \ Packet'), pmt_out)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble_len: '56'
    syncword: '"1110010"'
  states:
    _io_cache: ('Packetize', 'blk', [('preamble_len', '12'), ('syncword', "'1110010'")],
      [('MSG_In', 'message', 1)], [('Unpacked Packet', 'message', 1)], 'Embedded Python
      Block example - a simple multiply const', ['syncword'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 320.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: '"tx_pkt_len"'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 328.0]
    rotation: 0
    state: true
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'True'
    is_static: 'True'
    key: Payload
    label: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: '"Biscuit Does White Collar Crimes"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 288.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1320, 440.0]
    rotation: 0
    state: true
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.51'
    comment: ''
    decim: '1'
    gain: '.5'
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: 32*sps-1
    samp_rate: samp_rate
    sym_rate: samp_rate/sps
    type: interp_fir_filter_ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 576.0]
    rotation: 0
    state: true
- name: uhd_usrp_sink_0_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: carrier_freq
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: tx_device_addr
    dev_args: ''
    gain0: gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '"tx_pkt_len"'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1368, 684.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 328.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 600.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_0, strobe, epy_block_2, MSG_In]
- [blocks_repeat_0, '0', blocks_tagged_stream_multiply_length_0, '0']
- [blocks_tagged_stream_multiply_length_0, '0', epy_block_1, '0']
- [blocks_throttle2_0, '0', blocks_repeat_0, '0']
- [blocks_throttle2_0, '0', blocks_tagged_stream_multiply_length_0, '0']
- [epy_block_1, '0', root_raised_cosine_filter_0, '0']
- [epy_block_2, Unpacked Packet, blocks_message_debug_0, print_pdu]
- [epy_block_2, Unpacked Packet, pdu_pdu_to_tagged_stream_0, pdus]
- [pdu_pdu_to_tagged_stream_0, '0', virtual_sink_0, '0']
- [qtgui_edit_box_msg_0, msg, blocks_message_strobe_0, set_msg]
- [root_raised_cosine_filter_0, '0', blocks_file_sink_0, '0']
- [root_raised_cosine_filter_0, '0', qtgui_sink_x_0, '0']
- [root_raised_cosine_filter_0, '0', uhd_usrp_sink_0_0, '0']
- [virtual_source_0, '0', blocks_throttle2_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
